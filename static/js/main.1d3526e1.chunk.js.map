{"version":3,"sources":["logo.svg","serviceWorker.js","components/buttons/Button.js","components/bar/TopBar.js","components/queries/Dogs.js","navigation/errors/NotFound.js","components/bar/NavBar.js","components/todo/TodoForm.js","components/todo/Todo.js","components/todo/TodoList.js","components/todo/TodoLink.js","components/todo/Footer.js","components/todo/TodoMain.js","navigation/Router.js","App.js","state/defaults.js","state/resolvers.js","state/typeDefs.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","MyButton","react_default","a","createElement","Button_default","variant","color","withStyles","theme","appBar","position","icon","marginRight","spacing","unit","_ref","classes","AppBar_default","className","Toolbar_default","PhotoCamera_default","Typography_default","noWrap","GET_DOGS","gql","_templateObject","Dogs","_templateObject2","onDogSelected","react_apollo_browser_umd","query","_ref2","loading","error","data","concat","message","name","onChange","dogs","map","dog","key","id","value","breed","Notfound","root","width","maxWidth","backgroundColor","palette","background","paper","List_default","Link","to","style","textDecoration","ListItem_default","Avatar_default","Image_default","ListItemText_default","primary","secondary","Work_default","Inbox_default","BeachAccess_default","ADD_TODO","TodoForm_templateObject","TodoForm","mutation","addTodo","input","onSubmit","e","preventDefault","trim","variables","text","ref","node","type","TOGGLE_TODO","Todo_templateObject","Todo","completed","toggleTodo","onClick","GET_TODOS","TodoList_templateObject","TodoList","_ref$data","todos","visibilityFilter","filter","t","Error","getVisibleTodos","todo","todo_Todo","Object","assign","TodoLink","active","children","href","GET_VISIBILITY_FILTER","Footer_templateObject","FilterTodoLink","client","todo_TodoLink","writeData","Footer","Footer_FilterTodoLink","TodoMain","Fragment","todo_TodoForm","todo_TodoList","todo_Footer","Prout","Router","BrowserRouter","bar_NavBar","Switch","Route","exact","path","component","App","bar_TopBar","src","logo","alt","buttons_Button","navigation_Router","Component","defaults","nextTodoId","resolvers","Mutation","_","cache","resolvers_templateObject","previous","readQuery","newTodo","__typename","_ref3","fragment","resolvers_templateObject2","readFragment","objectSpread","typeDefs","InMemoryCache","ApolloClient","link","withClientState","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d3526e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister () {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\n\nconst MyButton = () => (\n  <Button variant=\"contained\" color=\"primary\">\n    OMG, a button!\n  </Button>\n)\n\nexport default MyButton\n","import React from \"react\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport PhotoCameraIcon from \"@material-ui/icons/PhotoCamera\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { withStyles } from \"@material-ui/core/styles\"\n\n// https://github.com/mui-org/material-ui/blob/master/docs/src/pages/getting-started/page-layout-examples/album/Album.js\nconst styles = theme => ({\n  appBar: {\n    position: \"relative\"\n  },\n  icon: {\n    marginRight: theme.spacing.unit * 2\n  }\n})\n\nconst TopBar = ({ classes }) => (\n  <AppBar position=\"static\" className={classes.appBar}>\n    <Toolbar>\n      <PhotoCameraIcon className={classes.icon} />\n      <Typography variant=\"h6\" color=\"inherit\" noWrap>\n        Ohnana\n      </Typography>\n    </Toolbar>\n  </AppBar>\n)\n\nexport default withStyles(styles)(TopBar)\n","import React from \"react\"\nimport gql from \"graphql-tag\"\nimport { Query } from \"react-apollo\"\n\nconst GET_DOGS = gql`\n  {\n    dogs {\n      id\n      breed\n    }\n  }\n`\n\nconst Dogs = ({ onDogSelected }) => (\n  <Query query={GET_DOGS}>\n    {({ loading, error, data }) => {\n      if (loading) return \"Loading...\"\n      if (error) return `Error! ${error.message}`\n\n      return (\n        <select name=\"dog\" onChange={onDogSelected}>\n          {data.dogs.map(dog => (\n            <option key={dog.id} value={dog.breed}>\n              {dog.breed}\n            </option>\n          ))}\n        </select>\n      )\n    }}\n  </Query>\n)\n\nconst GET_DOG_PHOTO = gql`\n  query Dog($breed: String!) {\n    dog(breed: $breed) {\n      id\n      displayImage\n    }\n  }\n`\n\n// const DogPhoto = ({ breed }) => (\n//   <Query query={GET_DOG_PHOTO} variables={{ breed }}>\n//     {({ loading, error, data }) => {\n//       if (loading) return null\n//       if (error) return `Error!: ${error}`\n\n//       return (\n//         <img src={data.dog.displayImage} style={{ height: 100, width: 100 }} />\n//       )\n//     }}\n//   </Query>\n// )\n\n// const DogPhoto = ({ breed }) => (\n//   <Query\n//     query={GET_DOG_PHOTO}\n//     variables={{ breed }}\n//     skip={!breed}\n//     pollInterval={500}\n//   >\n//     {({ loading, error, data, startPolling, stopPolling }) => {\n//       if (loading) return null\n//       if (error) return `Error!: ${error}`\n\n//       return (\n//         <img src={data.dog.displayImage} style={{ height: 100, width: 100 }} />\n//       )\n//     }}\n//   </Query>\n// )\n\nexport const DogPhoto = ({ breed }) => (\n  <Query query={GET_DOG_PHOTO} variables={{ breed }} skip={!breed}>\n    {({ loading, error, data, refetch }) => {\n      if (loading) return null\n      if (error) return `Error!: ${error}`\n\n      return (\n        <div>\n          <img\n            src={data.dog.displayImage}\n            style={{ height: 100, width: 100 }}\n          />\n          <button onClick={() => refetch()}>Refetch!</button>\n        </div>\n      )\n    }}\n  </Query>\n)\n\nexport default Dogs\n","import React from \"react\"\n\nconst Notfound = () => <h1>Not found</h1>\n\nexport default Notfound\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"react-router-dom\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport ImageIcon from \"@material-ui/icons/Image\"\nimport WorkIcon from \"@material-ui/icons/Work\"\nimport InboxIcon from \"@material-ui/icons/Inbox\"\nimport BeachAccessIcon from \"@material-ui/icons/BeachAccess\"\n\nconst styles = theme => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n})\n\nconst NavBar = ({ classes }) => (\n  <List className={classes.root}>\n    <Link to=\"/dogs\" style={{ textDecoration: \"none\" }}>\n      <ListItem>\n        <Avatar>\n          <ImageIcon />\n        </Avatar>\n        <ListItemText primary=\"Dogs\" secondary=\"Jan 9, 2014\" />\n      </ListItem>\n    </Link>\n    <Link to=\"/contacts\" style={{ textDecoration: \"none\" }}>\n      <ListItem>\n        <Avatar>\n          <WorkIcon />\n        </Avatar>\n        <ListItemText primary=\"Contacts\" secondary=\"Jan 7, 2014\" />\n      </ListItem>\n    </Link>\n    <Link to=\"/todo\" style={{ textDecoration: \"none\" }}>\n      <ListItem>\n        <Avatar>\n          <InboxIcon />\n        </Avatar>\n        <ListItemText primary=\"Inbox\" secondary=\"Top Secret\" />\n      </ListItem>\n    </Link>\n    <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n      <ListItem>\n        <Avatar>\n          <BeachAccessIcon />\n        </Avatar>\n        <ListItemText primary=\"Home\" secondary=\"July 20, 2014\" />\n      </ListItem>\n    </Link>\n  </List>\n)\n\nNavBar.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(NavBar)\n","import React from \"react\"\nimport { Mutation } from \"react-apollo\"\nimport gql from \"graphql-tag\"\n\nconst ADD_TODO = gql`\n  mutation addTodo($text: String!) {\n    addTodo(text: $text) @client {\n      id\n    }\n  }\n`\n\nconst TodoForm = () => (\n  <Mutation mutation={ADD_TODO}>\n    {addTodo => {\n      let input\n      return (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault()\n              if (!input.value.trim()) {\n                return\n              }\n              addTodo({ variables: { text: input.value } })\n              input.value = \"\"\n            }}\n          >\n            <input\n              ref={node => {\n                input = node\n              }}\n            />\n            <button type=\"submit\">Add Todo</button>\n          </form>\n        </div>\n      )\n    }}\n  </Mutation>\n)\n\nexport default TodoForm\n","import React from \"react\"\nimport { Mutation } from \"react-apollo\"\nimport gql from \"graphql-tag\"\n\nconst TOGGLE_TODO = gql`\n  mutation ToggleTodo($id: Int!) {\n    toggleTodo(id: $id) @client\n  }\n`\n\nconst Todo = ({ id, completed, text }) => (\n  <Mutation mutation={TOGGLE_TODO} variables={{ id }}>\n    {toggleTodo => (\n      <li\n        onClick={toggleTodo}\n        style={{\n          textDecoration: completed ? \"line-through\" : \"none\"\n        }}\n      >\n        {text}\n      </li>\n    )}\n  </Mutation>\n)\n\nexport default Todo\n","import React from \"react\"\nimport { Query } from \"react-apollo\"\nimport gql from \"graphql-tag\"\n\nimport Todo from \"./Todo\"\n\nconst GET_TODOS = gql`\n  {\n    todos @client {\n      id\n      completed\n      text\n    }\n    visibilityFilter @client\n  }\n`\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n  case \"SHOW_ALL\":\n    return todos\n  case \"SHOW_COMPLETED\":\n    return todos.filter(t => t.completed)\n  case \"SHOW_ACTIVE\":\n    return todos.filter(t => !t.completed)\n  default:\n    throw new Error(\"Unknown filter: \" + filter)\n  }\n}\n\nconst TodoList = () => (\n  <Query query={GET_TODOS}>\n    {({ data: { todos, visibilityFilter } }) => (\n      <ul>\n        {getVisibleTodos(todos, visibilityFilter).map(todo => (\n          <Todo key={todo.id} {...todo} />\n        ))}\n      </ul>\n    )}\n  </Query>\n)\n\nexport default TodoList\n","import React from \"react\"\n\nconst TodoLink = ({ active, children, onClick }) => {\n  if (active) {\n    return <span>{children}</span>\n  }\n\n  return (\n    // eslint-disable-next-line\n    <a\n      href=\"#\"\n      onClick={e => {\n        e.preventDefault()\n        onClick()\n      }}\n    >\n      {children}\n    </a>\n  )\n}\n\nexport default TodoLink\n","import React from \"react\"\nimport { Query } from \"react-apollo\"\nimport gql from \"graphql-tag\"\n\nimport TodoLink from \"./TodoLink\"\n\nconst GET_VISIBILITY_FILTER = gql`\n  {\n    visibilityFilter @client\n  }\n`\n\nconst FilterTodoLink = ({ filter, children }) => (\n  <Query query={GET_VISIBILITY_FILTER}>\n    {({ data, client }) => (\n      <TodoLink\n        onClick={() => client.writeData({ data: { visibilityFilter: filter } })}\n        active={data.visibilityFilter === filter}\n      >\n        {children}\n      </TodoLink>\n    )}\n  </Query>\n)\n\nconst Footer = () => (\n  <p>\n    Show: <FilterTodoLink filter=\"SHOW_ALL\">All</FilterTodoLink>\n    {\", \"}\n    <FilterTodoLink filter=\"SHOW_ACTIVE\">Active</FilterTodoLink>\n    {\", \"}\n    <FilterTodoLink filter=\"SHOW_COMPLETED\">Completed</FilterTodoLink>\n  </p>\n)\n\nexport default Footer\n","import React from \"react\"\nimport TodoForm from \"./TodoForm\"\nimport TodoList from \"./TodoList\"\nimport Footer from \"./Footer\"\n\nconst TodoMain = () => (\n  <>\n    <TodoForm />\n    <TodoList />\n    <Footer />\n  </>\n)\n\nexport default TodoMain\n","import React from \"react\"\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\"\nimport Dogs from \"components/queries/Dogs\"\nimport Notfound from \"navigation/errors/NotFound\"\nimport NavBar from \"components/bar/NavBar\"\nimport TodoMain from \"components/todo/TodoMain\"\n\nconst Prout = () => (\n  <h1>\n    Welcome! Try to click everywhere if you want, but it's not doing much at the\n    moment\n  </h1>\n)\n\nconst getHomePath = () =>\n  process.env.NODE_ENV === \"production\" ? \"/github-pages/\" : \"/\"\n\nconst Router = () => (\n  <BrowserRouter>\n    <div>\n      <NavBar />\n      <Switch>\n        <Route exact path={getHomePath()} component={Prout} />\n        <Route path=\"/dogs\" component={Dogs} />\n        <Route path=\"/todo\" component={TodoMain} />\n        <Route component={Notfound} />\n      </Switch>\n    </div>\n  </BrowserRouter>\n)\n\nexport default Router\n","import React, { Component } from \"react\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\nimport MyButton from \"components/buttons/Button\"\nimport TopBar from \"components/bar/TopBar\"\nimport Router from \"navigation/Router\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar />\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Bom dia!</p>\n          <MyButton>Wow</MyButton>\n        </header>\n        <body>\n          <Router />\n        </body>\n      </div>\n    )\n  }\n}\n\nexport default App\n","export const defaults = {\n  todos: [],\n  visibilityFilter: \"SHOW_ALL\"\n}\n\nexport default { defaults }\n","import gql from \"graphql-tag\"\n\n// fieldName: (obj, args, context, info) => result;\nlet nextTodoId = 0\n\nexport const resolvers = {\n  Mutation: {\n    addTodo: (_, { text }, { cache }) => {\n      const query = gql`\n        query GetTodos {\n          todos @client {\n            id\n            text\n            completed\n          }\n        }\n      `\n      const previous = cache.readQuery({ query })\n      const newTodo = {\n        id: nextTodoId++,\n        text,\n        completed: false,\n        __typename: \"TodoItem\"\n      }\n      const data = {\n        todos: previous.todos.concat([newTodo])\n      }\n      cache.writeData({ data })\n      return newTodo\n    },\n    toggleTodo: (_, variables, { cache }) => {\n      const id = `TodoItem:${variables.id}`\n      const fragment = gql`\n        fragment completeTodo on TodoItem {\n          completed\n        }\n      `\n      const todo = cache.readFragment({ fragment, id })\n      const data = { ...todo, completed: !todo.completed }\n      cache.writeData({ id, data })\n      return null\n    }\n  }\n}\n\nexport default { resolvers }\n","export const typeDefs = `\n  type Todo {\n    id: Int!\n    text: String!\n    completed: Boolean!\n  }\n\n  type Mutation {\n    addTodo(text: String!): Todo\n    toggleTodo(id: Int!): Todo\n  }\n\n  type Query {\n    visibilityFilter: String\n    todos: [Todo]\n  }\n`\n\nexport default { typeDefs }\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"typeface-roboto\"\n\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n// import { HttpLink } from \"apollo-link-http\"\nimport { ApolloClient } from \"apollo-client\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { withClientState } from \"apollo-link-state\"\n\nimport \"./index.css\"\nimport App from \"./App\"\n\nimport { defaults } from \"state/defaults\"\nimport { resolvers } from \"state/resolvers\"\nimport { typeDefs } from \"state/typeDefs\"\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  cache,\n  link: withClientState({ resolvers, defaults, cache, typeDefs })\n})\n\nconst ReactApp = () => (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n)\n\nReactDOM.render(<ReactApp />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}